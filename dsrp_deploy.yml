#!ENV/bin/python3

import os

dsrp_root_dir = os.path.dirname(os.path.realpath(__file__))
activate_this = dsrp_root_dir+"/ENV/bin/activate_this.py"
exec(open(activate_this, 'r').read(), dict(__file__=activate_this))

import sys
import io
import argparse
import subprocess
import hostlist
import yaml
from dsrp.common import get_env_var
from dsrp.dsrp_config import DSRPConfig
from dsrp.dsrp_inventory import DSRPInventory

dsrp_config = DSRPConfig ()
dsrp_inventory = DSRPInventory ()

def parse_args ():
    global dsrp_config
    parser = argparse.ArgumentParser ()
    parser.add_argument ("dsrp_config", help="Path of file containing DSRP configuration")
    args = parser.parse_args()
    if args.dsrp_config:
        dsrp_config.load_config (args.dsrp_config)


def main (argv):
    global dsrp_root_dir, dsrp_config, dsrp_inventory
    parse_args ()

    dsrp_inventory.load_inventory (dsrp_root_dir,
                                   dsrp_config.get_system(),
                                   dsrp_config.get_inventory_filename())

    #######################
    # Storage nodes       #
    #######################
    storage_nodelist = get_env_var (dsrp_config.get_storage_sched_env_var ())
    dsrp_inventory.set_storage_nodelist (storage_nodelist)
    dsrp_inventory.write_job_inventory ()
        
    # print ("[INFO] New inventory file generated with "+str(len(nodes_list))+" hosts in the storage_nodes section")

    # # Run Ansible Playbook
    # # p = subprocess.Popen (['ansible-playbook',
    # #                        '-i', target,
    # #                        playbook])
    
if __name__ == "__main__":
    main (sys.argv[1:])
